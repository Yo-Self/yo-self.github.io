"use client";

import React, { useState, useCallback } from 'react';

export interface GeolocationPosition {
  latitude: number;
  longitude: number;
  accuracy?: number;
}

export interface GeolocationState {
  position: GeolocationPosition | null;
  isLoading: boolean;
  error: string | null;
  isSupported: boolean;
  isBlocked?: boolean;
  isSafariIOS?: boolean;
  permissionStatus?: string;
}

export function useGeolocationSafariIOSFinal() {
  const [state, setState] = useState<GeolocationState>(() => ({
    position: null,
    isLoading: false,
    error: null,
    isSupported: false, // Sempre false no servidor
    isSafariIOS: false, // Sempre false no servidor
    permissionStatus: 'unknown'
  }));

  // Detectar navegador apenas no cliente
  React.useEffect(() => {
    const isSupported = typeof navigator !== 'undefined' && 'geolocation' in navigator;
    const isSafariIOS = typeof navigator !== 'undefined' && 
      /iPad|iPhone|iPod/.test(navigator.userAgent) && 
      /Safari/.test(navigator.userAgent) && 
      !/CriOS|FxiOS|OPiOS|mercury/.test(navigator.userAgent);

    setState(prev => ({
      ...prev,
      isSupported,
      isSafariIOS
    }));
  }, []);

  const checkPermissionStatus = useCallback(async (onPermissionChange?: (status: string) => void) => {
    if (typeof navigator !== 'undefined' && 'permissions' in navigator) {
      try {
        const permission = await navigator.permissions.query({ name: 'geolocation' as PermissionName });
        setState(prev => ({
          ...prev,
          permissionStatus: permission.state
        }));
        onPermissionChange?.(permission.state);
        return permission.state;
      } catch (error) {
        console.log('N√£o foi poss√≠vel verificar status da permiss√£o:', error);
        return 'unknown';
      }
    }
    return 'unknown';
  }, []);

  const getCurrentPosition = useCallback(async (onLog?: (message: string) => void, onPermissionChange?: (status: string) => void): Promise<GeolocationPosition | null> => {
    const isSupported = typeof navigator !== 'undefined' && 'geolocation' in navigator;
    const isSafariIOS = typeof navigator !== 'undefined' && 
      /iPad|iPhone|iPod/.test(navigator.userAgent) && 
      /Safari/.test(navigator.userAgent) && 
      !/CriOS|FxiOS|OPiOS|mercury/.test(navigator.userAgent);
    
    const isSafariMacOS = typeof navigator !== 'undefined' && 
      /Macintosh/.test(navigator.userAgent) && 
      /Safari/.test(navigator.userAgent) && 
      !/Chrome/.test(navigator.userAgent);

    const log = (message: string) => {
      console.log(message);
      onLog?.(message);
    };

    log('üîç === IN√çCIO DO DEBUG ===');
    log(`üì± Navegador: ${navigator.userAgent}`);
    log(`üì± Safari iOS detectado: ${isSafariIOS}`);
    log(`üì± Safari macOS detectado: ${isSafariMacOS}`);
    log(`üîß Geolocaliza√ß√£o suportada: ${isSupported}`);
    log(`üîß Navigator existe: ${typeof navigator !== 'undefined'}`);
    log(`üîß Geolocation existe: ${typeof navigator !== 'undefined' && 'geolocation' in navigator}`);

    if (!isSupported) {
      log('‚ùå Geolocaliza√ß√£o n√£o suportada');
      setState(prev => ({
        ...prev,
        error: 'Geolocaliza√ß√£o n√£o √© suportada neste navegador'
      }));
      return null;
    }

    // Verificar status da permiss√£o primeiro
    const permissionStatus = await checkPermissionStatus(onPermissionChange);
    log(`üîê Status da permiss√£o: ${permissionStatus}`);
    
    setState(prev => ({
      ...prev,
      isLoading: true,
      error: null,
      permissionStatus
    }));

    log('üìç === INICIANDO SOLICITA√á√ÉO DE GEOLOCALIZA√á√ÉO ===');

    try {
      let position: GeolocationPosition | null = null;

      // Estrat√©gia 0: Double Request (para "acordar" o Safari)
      if (isSafariIOS) {
        log('üìç === ESTRAT√âGIA 0: Double Request (Safari iOS) ===');
        try {
          position = await new Promise<GeolocationPosition>(async (resolve, reject) => {
            const initialOptions: PositionOptions = {
              enableHighAccuracy: false,
              timeout: 1000, // Timeout curto para "acordar"
              maximumAge: Infinity
            };

            log(`üìç Op√ß√µes Iniciais: ${JSON.stringify(initialOptions)}`);

            navigator.geolocation.getCurrentPosition(
              () => {
                // Sucesso inesperado, mas √≥timo. Tentar obter a real.
                log('‚úÖ Estrat√©gia 0: Sucesso inesperado na primeira chamada.');
                // A partir daqui, a ESTRAT√âGIA 1 deve funcionar
                reject(new Error('Primeira chamada bem-sucedida, continue para a pr√≥xima estrat√©gia.'));
              },
              async (err) => {
                log(`‚ö†Ô∏è Estrat√©gia 0: Falha esperada na primeira chamada - ${err.message}. Tentando a segunda...`);
                
                // Agora a segunda chamada com mais chances
                const secondOptions: PositionOptions = {
                  enableHighAccuracy: true,
                  timeout: 15000,
                  maximumAge: 0
                };

                log(`üìç Op√ß√µes da Segunda Chamada: ${JSON.stringify(secondOptions)}`);

                navigator.geolocation.getCurrentPosition(
                  (pos) => {
                    log('‚úÖ Estrat√©gia 0: Sucesso na segunda chamada!');
                    resolve({
                      latitude: pos.coords.latitude,
                      longitude: pos.coords.longitude,
                      accuracy: pos.coords.accuracy
                    });
                  },
                  (err) => {
                    log(`‚ùå Estrat√©gia 0: Falhou na segunda chamada - ${err.message}`);
                    reject(err);
                  },
                  secondOptions
                );
              },
              initialOptions
            );
          });
        } catch (err) {
          log('‚ùå Estrat√©gia 0 falhou, tentando estrat√©gia 1...');
        }
      }

      // Estrat√©gia 1: Configura√ß√£o padr√£o
      if (!position) {
        log('üìç === ESTRAT√âGIA 1: Configura√ß√£o padr√£o ===');
        try {
          position = await new Promise<GeolocationPosition>((resolve, reject) => {
            const options: PositionOptions = {
              enableHighAccuracy: true,
              timeout: 15000,
              maximumAge: 0
            };

            log(`üìç Op√ß√µes: ${JSON.stringify(options)}`);
            
            navigator.geolocation.getCurrentPosition(
              (pos) => {
                log('‚úÖ Estrat√©gia 1: Sucesso!');
                resolve({
                  latitude: pos.coords.latitude,
                  longitude: pos.coords.longitude,
                  accuracy: pos.coords.accuracy
                });
              },
              (err) => {
                log(`‚ùå Estrat√©gia 1: Falhou - ${err.message}`);
                reject(err);
              },
              options
            );
          });
        } catch (err) {
          log('‚ùå Estrat√©gia 1 falhou, tentando estrat√©gia 2...');
        }
      }

      // Estrat√©gia 2: Configura√ß√£o m√≠nima (se estrat√©gia 1 falhou)
      if (!position) {
        log('üìç === ESTRAT√âGIA 2: Configura√ß√£o m√≠nima ===');
        try {
          position = await new Promise<GeolocationPosition>((resolve, reject) => {
            const options: PositionOptions = {
              enableHighAccuracy: false,
              timeout: 30000,
              maximumAge: 60000
            };

            log(`üìç Op√ß√µes: ${JSON.stringify(options)}`);
            
            navigator.geolocation.getCurrentPosition(
              (pos) => {
                log('‚úÖ Estrat√©gia 2: Sucesso!');
                resolve({
                  latitude: pos.coords.latitude,
                  longitude: pos.coords.longitude,
                  accuracy: pos.coords.accuracy
                });
              },
              (err) => {
                log(`‚ùå Estrat√©gia 2: Falhou - ${err.message}`);
                reject(err);
              },
              options
            );
          });
        } catch (err) {
          log('‚ùå Estrat√©gia 2 falhou, tentando estrat√©gia 3...');
        }
      }

      // Estrat√©gia 3: watchPosition como fallback (se outras falharam)
      if (!position) {
        log('üìç === ESTRAT√âGIA 3: watchPosition fallback ===');
        try {
          position = await new Promise<GeolocationPosition>((resolve, reject) => {
            const options: PositionOptions = {
              enableHighAccuracy: false,
              timeout: 20000,
              maximumAge: 0
            };

            log(`üìç Op√ß√µes: ${JSON.stringify(options)}`);
            log('üìç Usando watchPosition como fallback...');
            
            const watchId = navigator.geolocation.watchPosition(
              (pos) => {
                log('‚úÖ Estrat√©gia 3: Sucesso com watchPosition!');
                navigator.geolocation.clearWatch(watchId);
                resolve({
                  latitude: pos.coords.latitude,
                  longitude: pos.coords.longitude,
                  accuracy: pos.coords.accuracy
                });
              },
              (err) => {
                log(`‚ùå Estrat√©gia 3: Falhou - ${err.message}`);
                navigator.geolocation.clearWatch(watchId);
                reject(err);
              },
              options
            );

            // Timeout para watchPosition
            setTimeout(() => {
              navigator.geolocation.clearWatch(watchId);
              reject(new Error('watchPosition timeout'));
            }, 20000);
          });
        } catch (err) {
          log('‚ùå Todas as estrat√©gias falharam');
          throw err;
        }
      }

      log('‚úÖ === POSI√á√ÉO OBTIDA ===');
      log(`‚úÖ Posi√ß√£o retornada: ${JSON.stringify(position)}`);
      
      setState(prev => ({
        ...prev,
        position,
        isLoading: false,
        error: null
      }));

      return position;

    } catch (error: any) {
      log('‚ùå === CAPTURA DE ERRO ===');
      log(`‚ùå Erro capturado: ${JSON.stringify(error)}`);
      log(`‚ùå Tipo do erro: ${typeof error}`);
      log(`‚ùå Erro completo: ${JSON.stringify(error, null, 2)}`);
      
      let errorMessage = 'Erro ao obter localiza√ß√£o';
      let isBlocked = false;
      
      if (error && error.code !== undefined) {
        switch (error.code) {
          case error.PERMISSION_DENIED:
            log('üö´ Tratando PERMISSION_DENIED');
            if (error.message && error.message.includes('User denied Geolocation')) {
              isBlocked = true;
              errorMessage = 'Permiss√£o de localiza√ß√£o foi bloqueada pelo navegador. Para resolver:\n\n1. V√° em Configura√ß√µes ‚Üí Safari ‚Üí Localiza√ß√£o\n2. Mude para \"Perguntar\" ou \"Permitir\"\n3. Recarregue a p√°gina\n\nOu acesse: Configura√ß√µes ‚Üí Privacidade e Seguran√ßa ‚Üí Localiza√ß√£o ‚Üí Safari';
            } else if (error.message && error.message.includes('Origin does not have permission')) {
              isBlocked = true;
              errorMessage = 'üö´ BLOQUEIO PROFUNDO DO SAFARI macOS DETECTADO\n\nEste √© um bloqueio a n√≠vel do sistema operacional. Para resolver:\n\nüîß SOLU√á√ÉO 1 - Configura√ß√µes do Sistema:\n1. Configura√ß√µes do Sistema ‚Üí Privacidade e Seguran√ßa ‚Üí Localiza√ß√£o\n2. Certifique-se de que \"Safari\" est√° ATIVADO\n3. Se n√£o estiver, clique em \"+\" e adicione o Safari\n\nüîß SOLU√á√ÉO 2 - Reset das Permiss√µes:\n1. Feche o Safari completamente (Cmd + Q)\n2. Abra o Terminal e execute: defaults delete com.apple.Safari\n3. Reabra o Safari\n\nüîß SOLU√á√ÉO 3 - Teste em Modo Privado:\n1. Abra uma aba privada (Cmd + Shift + N)\n2. Teste a geolocaliza√ß√£o\n\nüîß SOLU√á√ÉO 4 - Verificar HTTPS:\nCertifique-se de que o site est√° em HTTPS ou localhost';
            } else {
              errorMessage = 'Permiss√£o de localiza√ß√£o negada. Se a caixa de di√°logo de permiss√£o n√£o aparecer, tente atualizar a p√°gina e tentar novamente.';
            }
            break;
          case error.POSITION_UNAVAILABLE:
            log('üìç Tratando POSITION_UNAVAILABLE');
            errorMessage = 'Localiza√ß√£o n√£o dispon√≠vel. Verifique se o GPS est√° ativado.';
            break;
          case error.TIMEOUT:
            log('‚è∞ Tratando TIMEOUT');
            errorMessage = 'Tempo limite para obter localiza√ß√£o. Tente novamente.';
            break;
          default:
            log(`‚ùì Tratando erro desconhecido: ${error.code}`);
            errorMessage = `Erro desconhecido (c√≥digo: ${error.code}): ${error.message || 'Erro ao obter localiza√ß√£o'}`;
        }
      } else {
        log(`‚ùì Erro sem c√≥digo definido: ${error}`);
        errorMessage = `Erro: ${error.message || 'Erro ao obter localiza√ß√£o'}`;
      }

      log(`‚ùå Mensagem de erro final: ${errorMessage}`);
      log(`‚ùå Bloqueado: ${isBlocked}`);

      setState(prev => ({
        ...prev,
        isLoading: false,
        error: errorMessage,
        isBlocked
      }));
      
      return null;
    }
  }, [checkPermissionStatus]);

  const clearPosition = useCallback(() => {
    setState(prev => ({
      ...prev,
      position: null,
      error: null
    }));
  }, []);

  return {
    ...state,
    getCurrentPosition,
    clearPosition,
    checkPermissionStatus
  };
}
