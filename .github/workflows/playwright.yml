name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    services:
      # Optional: Add PostgreSQL service for local database tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    # First run standalone tests (no server required)
    - name: Run standalone tests
      run: npx playwright test tests/standalone-tests.spec.cjs --project=chromium --config=playwright.config.cjs
      env:
        CI: true
        SKIP_WEBSERVER: true
    
    # Then run full test suite with server
    - name: Run comprehensive tests with server
      run: |
        # Use the timeout script to prevent hanging tests
        NODE_ENV=test ./scripts/run-tests-with-timeout.sh
      env:
        CI: true
        NODE_ENV: test # Force test environment
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        # Fallback values for when secrets are not set
        NEXT_PUBLIC_SUPABASE_URL_FALLBACK: http://localhost:9999
        NEXT_PUBLIC_SUPABASE_ANON_KEY_FALLBACK: invalid-key
        DISABLE_API_CALLS: true
      timeout-minutes: 12 # Increased to allow for script execution
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results
        path: |
          playwright-report/
          test-results/
        retention-days: 7
    
    - name: Upload build artifacts (for debugging)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          out/
        retention-days: 1

  # Notification job - Success
  notify-success:
    needs: test
    if: always() && needs.test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Send success notification to CI/CD tab
        run: |
          # Primeiro, tenta enviar para o chat_id atual
          RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "message_thread_id": 2,
              "text": "🤖 **GitHub Actions - Playwright Tests**\n\n📋 **Status:** ✅ Sucesso\n\n🌿 **Branch:** ${{ github.ref_name }}\n\n📝 **Detalhes:** Todos os testes Playwright passaram com sucesso!\n\n🔗 **Ver execução:** [Playwright Tests](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n⏰ **Executado em:** ${{ github.event.head_commit.timestamp || github.event.schedule || 'Agora' }}",
              "parse_mode": "Markdown"
            }')
          
          # Se falhar com erro de supergrupo, usa o migrate_to_chat_id
          if echo "$RESPONSE" | grep -q "migrate_to_chat_id"; then
            echo "🔄 Chat foi convertido para supergrupo, usando migrate_to_chat_id..."
            MIGRATE_ID=$(echo "$RESPONSE" | grep -o '"migrate_to_chat_id":[^,]*' | cut -d':' -f2 | tr -d ' }')
            echo "📱 Usando chat_id: $MIGRATE_ID"
            
            # Envia a mensagem com o chat_id correto
            curl -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": '$MIGRATE_ID',
                "message_thread_id": 2,
                "text": "🤖 **GitHub Actions - Playwright Tests**\n\n📋 **Status:** ✅ Sucesso\n\n🌿 **Branch:** ${{ github.ref_name }}\n\n📝 **Detalhes:** Todos os testes Playwright passaram com sucesso!\n\n🔗 **Ver execução:** [Playwright Tests](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n⏰ **Executado em:** ${{ github.event.head_commit.timestamp || github.event.schedule || 'Agora' }}",
                "parse_mode": "Markdown"
              }'
          else
            echo "✅ Notificação enviada com sucesso!"
            echo "$RESPONSE"
          fi

  # Notification job - Failure
  notify-failure:
    needs: test
    if: always() && needs.test.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification to CI/CD tab
        run: |
          # Primeiro, tenta enviar para o chat_id atual
          RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "message_thread_id": 2,
              "text": "🤖 **GitHub Actions - Playwright Tests**\n\n📋 **Status:** ❌ Falha\n\n🌿 **Branch:** ${{ github.ref_name }}\n\n📝 **Detalhes:** Alguns testes Playwright falharam. Verifique os resultados para mais detalhes.\n\n🔗 **Ver execução:** [Playwright Tests](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n⏰ **Executado em:** ${{ github.event.head_commit.timestamp || github.event.schedule || 'Agora' }}",
              "parse_mode": "Markdown"
            }')
          
          # Se falhar com erro de supergrupo, usa o migrate_to_chat_id
          if echo "$RESPONSE" | grep -q "migrate_to_chat_id"; then
            echo "🔄 Chat foi convertido para supergrupo, usando migrate_to_chat_id..."
            MIGRATE_ID=$(echo "$RESPONSE" | grep -o '"migrate_to_chat_id":[^,]*' | cut -d':' -f2 | tr -d ' }')
            echo "📱 Usando chat_id: $MIGRATE_ID"
            
            # Envia a mensagem com o chat_id correto
            curl -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": '$MIGRATE_ID',
                "message_thread_id": 2,
                "text": "🤖 **GitHub Actions - Playwright Tests**\n\n📋 **Status:** ❌ Falha\n\n🌿 **Branch:** ${{ github.ref_name }}\n\n📝 **Detalhes:** Alguns testes Playwright falharam. Verifique os resultados para mais detalhes.\n\n🔗 **Ver execução:** [Playwright Tests](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n⏰ **Executado em:** ${{ github.event.head_commit.timestamp || github.event.schedule || 'Agora' }}",
                "parse_mode": "Markdown"
              }'
          else
            echo "✅ Notificação enviada com sucesso!"
            echo "$RESPONSE"
          fi
